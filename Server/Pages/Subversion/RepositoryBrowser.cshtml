@page "{repositoryname}/{*repositorysubpath}"
@using Microsoft.AspNetCore.Html
@model Server.Pages.Subversion.RepositoryBrowserModel
@{
    ViewData["Title"] = "Repository browser";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}



<h1>@ViewData["Title"]</h1>
<br />




<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        @{
            for (int i = 0; i < Model.PathItems().Count; ++i) {
                if (i == Model.PathItems().Count - 1) {
                    <li class="breadcrumb-item active" aria-current="page" )>
                        @Model.PathItems()[i]
                    </li>
                } else {
                    <li class="breadcrumb-item">
                        <a href="/Subversion/RepositoryBrowser/@string.Join('/', Model.PathItems().Take(i + 1))">@Model.PathItems()[i]</a>
                    </li>
                }
            }
        }
    </ol>
</nav>




<div class="float-right" style="margin-bottom: 16px !important; ">
    <!--data-trigger="focus"-->
    <button type="button" ID="Button1" class="btn btn-lg btn-success" data-toggle="popover" data-placement="left" title="Checkout">
        <span class="align-middle">
            @Model.Icons.GetIconHtml("download-16")
        </span>
        Code
        <div style="display: none" data-popover-html="yes">
            <div class="input-group">
                <input id="repo_checkout_url" type="text" class="form-control" aria-label="Recipient's username with two button addons" aria-describedby="button-addon1" value="@Model.Api.Subversion.GetCheckoutUrl(Model.RepositoryName, Model.RepositorySubpath)" readonly />
                <div class="input-group-append" id="button-addon1">
                    <div id="wtf" class="btn btn-outline-primary" type="button" onclick="copyText()">
                        Copy
                    </div>
                </div>
            </div>
        </div>
    </button>
</div>


@{
    if (Model.Content == null) {
        <table class="table table-striped">
            <tr>
                <th>Kind</th>
                <th>Name</th>
                <th>Author</th>
                <th>Revision</th>
                <th>Size</th>
            </tr>
            @{
                if (Model.Data.Entry != null) {
                    foreach (var entry in Model.Data.Entry) {
                        <tr>
                            <td>@entry.Kind</td>
                            <td>
                                <a href="@Model.GetSubpath(@entry.Name)">@entry.Name@(entry.Kind == "dir" ? "/" : "")</a>
                            </td>

                            <td>@entry.Commit.Author</td>
                            <td>@entry.Commit.Revision</td>
                            <td>@entry.Size</td>
                        </tr>
                    }
                }

            }
        </table>

        if (Model.HasChildReadmeFile()) {
            <div style="padding: 16px;
                                              margin: -1px -1px 0;
                                              border: 1px solid #e1e4e8;
                                              border-radius: 6px;
                                              box-sizing: border-box;">
                @Html.Raw(Model.GetChildReadmeFileFormatted())
            </div>
        }
    } else {
        <div style="padding: 16px;
                                              margin: -1px -1px 0;
                                              background-color: #f6f8fa;
                                              border: 1px solid #e1e4e8;
                                              border-top-left-radius: 6px;
                                              border-top-right-radius: 6px;
                                              box-sizing: border-box;
                                          ">
            @(Model.LinesCount) lines | @(Model.CurrentFileSize) bytes
        </div>


        <div style="padding: 16px;
                           margin: -1px -1px 0;
                           border: 1px solid #e1e4e8;
                           border-bottom-left-radius: 6px;
                           border-bottom-right-radius: 6px;
                           box-sizing: border-box;">
            @Html.Raw(Model.FormattedContent)
        </div>
    }
}


@section scripts{
    <script>
        function copyText() {
            var urlInput = document.getElementById("repo_checkout_url");
            urlInput.select();
            urlInput.setSelectionRange(0, 99999); // For mobile devices
            navigator.clipboard.writeText(urlInput.value);
            console.log("COPY TEXT: " + urlInput.value)
        }
    </script>

    <script>
        //Enable popovers with child element [data-popover-html=yes] as content
        $(document).ready(function () {
            $("[data-toggle=popover]").each(function () {
                $(this).popover({
                    html: true,
                    placement: 'bottom',
                    container: 'body',
                    sanitize: false,
                    content: function () {
                        return $('[data-popover-html=yes]', this).first().html();
                    }
                });
            });
        });
    </script>
}



